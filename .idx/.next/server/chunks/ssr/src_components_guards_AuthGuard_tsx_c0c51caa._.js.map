{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/guards/AuthGuard.tsx"],"sourcesContent":["\n\"use client\";\n\nimport { useAuth } from '@/context/AuthContext';\nimport { useRouter, usePathname } from 'next/navigation';\nimport type { ReactNode } from 'react';\nimport { useEffect } from 'react';\nimport { Loader2 } from 'lucide-react';\n\ninterface AuthGuardProps {\n  children: ReactNode;\n  adminOnly?: boolean;\n}\n\nexport default function AuthGuard({ children, adminOnly = false }: AuthGuardProps) {\n  const { user, loading, isAdmin } = useAuth();\n  const router = useRouter();\n  const pathname = usePathname();\n\n  useEffect(() => {\n    if (!loading) {\n      if (!user) {\n        // Store the current path to redirect back after login\n        router.push(`/login?redirect=${encodeURIComponent(pathname)}`);\n      } else if (adminOnly && !isAdmin) {\n        // If adminOnly route and user is not admin, redirect to homepage.\n        // console.warn(\"Access to admin route denied. User is not an admin. Redirecting to home.\");\n        toast({\n          title: \"Access Denied\",\n          description: \"You do not have permission to view this page.\",\n          variant: \"destructive\",\n        });\n        router.push('/'); \n      }\n    }\n  }, [user, loading, isAdmin, adminOnly, router, pathname]);\n\n  if (loading || (!user && !loading) || (adminOnly && !isAdmin && user && !loading)) {\n    // Show loader if:\n    // 1. Auth state is loading.\n    // 2. Auth state finished loading, no user (redirect will occur).\n    // 3. Auth state finished loading, user exists, but it's an adminOnly route and user isn't admin (redirect will occur).\n    return (\n      <div className=\"flex justify-center items-center min-h-screen\">\n        <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />\n      </div>\n    );\n  }\n  // At this point, user is loaded, and if it's an adminOnly route, user is an admin.\n  return <>{children}</>;\n}\n\n// Basic toast for AuthGuard (cannot use useToast directly here easily without context issues in redirects)\n// A more robust solution might involve a global non-React toast or passing toast via props.\nconst toast = (options: {title: string, description: string, variant: string}) => {\n  // This is a simplified toast for the guard. In a real app, you might use a global toast instance.\n  console.warn(`AuthGuard Toast: ${options.title} - ${options.description} (${options.variant})`);\n};\n"],"names":[],"mappings":";;;;AAGA;AACA;AAEA;AACA;AANA;;;;;;AAae,SAAS,UAAU,EAAE,QAAQ,EAAE,YAAY,KAAK,EAAkB;IAC/E,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,8HAAA,CAAA,UAAO,AAAD;IACzC,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IACvB,MAAM,WAAW,CAAA,GAAA,kIAAA,CAAA,cAAW,AAAD;IAE3B,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,CAAC,SAAS;YACZ,IAAI,CAAC,MAAM;gBACT,sDAAsD;gBACtD,OAAO,IAAI,CAAC,CAAC,gBAAgB,EAAE,mBAAmB,WAAW;YAC/D,OAAO,IAAI,aAAa,CAAC,SAAS;gBAChC,kEAAkE;gBAClE,4FAA4F;gBAC5F,MAAM;oBACJ,OAAO;oBACP,aAAa;oBACb,SAAS;gBACX;gBACA,OAAO,IAAI,CAAC;YACd;QACF;IACF,GAAG;QAAC;QAAM;QAAS;QAAS;QAAW;QAAQ;KAAS;IAExD,IAAI,WAAY,CAAC,QAAQ,CAAC,WAAa,aAAa,CAAC,WAAW,QAAQ,CAAC,SAAU;QACjF,kBAAkB;QAClB,4BAA4B;QAC5B,iEAAiE;QACjE,uHAAuH;QACvH,qBACE,8OAAC;YAAI,WAAU;sBACb,cAAA,8OAAC,iNAAA,CAAA,UAAO;gBAAC,WAAU;;;;;;;;;;;IAGzB;IACA,mFAAmF;IACnF,qBAAO;kBAAG;;AACZ;AAEA,2GAA2G;AAC3G,4FAA4F;AAC5F,MAAM,QAAQ,CAAC;IACb,kGAAkG;IAClG,QAAQ,IAAI,CAAC,CAAC,iBAAiB,EAAE,QAAQ,KAAK,CAAC,GAAG,EAAE,QAAQ,WAAW,CAAC,EAAE,EAAE,QAAQ,OAAO,CAAC,CAAC,CAAC;AAChG","debugId":null}}]
}